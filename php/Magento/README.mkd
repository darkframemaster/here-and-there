# Guide
* install guide : `install.mkd`
* command line guide : `commandLine.mkd`
* `Module` development : `devPHP.mkd`
* `Theme` development : `./frontend/`
* Sample code : `./code/`

# About Magento2

## file structure
* `app/etc/di.xml` : important file that we might often look into during development.It contains various class mappings or preferences for individual interfaces.
* `bin/` : Where the Magento command script located.
* `dev/` : Where we can find the Magento test scripts.
* `lib/` : Comprises two major subdirectories,namely the server-side PHP library code and fonts found under lib/interal and the client-side JS libraries found in lib/web.	
* `pub/` : Where the publicly exposed files are located.This is the directory that we should set as root when setting up Apache or Nginx.The `pub/index.php` file is what gets riggered when the storefront is opened in a browser.
* `var/` : By default, Magento uses the var directories to store the cache, logs, and compiled code. We should be able to delete the content of this folder at any time and have Magento automatically recreate it.
* `vendor/` : Where most of the code is located.This is where we can find varrois third-party vendor code,Magento modules,themems and language packs.
	* Within `vendor/` we can find code from various vendors,magento itself can be found here.



## The var directory
Magento dose a lot of caching and autogeneration of certain class types and they are located in Magento's root `var/` directory.Here are the subdirectories:

* `cache/`
* `composer_home/`
* `generation/`
* `log/`
* `di/`
* `view_preprocessed/`
* `page_cache/`

> During development, we will most likely need to periodically clear these so that our changes can kick in.



## Component root directory location
* `<magento install directory>/app`
	* For modules: `app/code`
	* For store front themes: `app/design/frontend`
	* For Admin themes: `app/design/adminhtml`
	* For language packages: `app/i18n`
* `<magento install directory>/vendor`



## Coding standards
There are several coding standards that Magento abides by,such as the following ones:

* The code demarcation standard
* [The PHP coding standard](http://www.php-fig.org)
* [The JS coding standard](https://www.google.github.io/styleguide/javascriptguide.xml)
* The jQuery widget coding standard
* The DocBlock standard
* [JS DocBlock standard](http:usejsdoc.org)
* The LESS coding standard



## Code generation
Code generation generates **non**existent classes. These classes are genereated in Magento's `var/generation` directory. The code is generated for something that is called **Factory,Proxy and Interceptor** classes.

* **Factories** are used to isolate an object manage from the business code.Factories can be dependent on the object manager,unlike business objects.
	* For example `var/generation/Magento/Catalog/Model/ProductFactory.php` with `var/generation/Magento/Catalog/Model/Product` class.
* **Proxy** class is a wrapper for some base class. Proxy class provide better performance because they can be instantiated(实例化) without instantiating a base class.A base class is instantiated only when one of its methods is called.This is highly convenient for cases where base class is used as a dependency, but it takes a lot of time to instantiate, and its methods are used only during some paths of execution.
	* For example `var/generation/Magento/Catalog/Model/Session/Proxy.php` cantains the `var/generation/Magento/Catalog/Model/Session/Proxy` class.
* **Interceptor** is yet another class type that gets autogenerated by Magento.It is related to the plugins feature.

During runtime,when `{someClassName}[Factory|Proxy]` is called in the code,Magento creates a Factory/Proxy class under the `var/genertion` directory if it does not exists.

In order to trigger code regeneration, we can use the code compiler that is available on the console.



## metapackage
An empty package that contains requirements and will trigger their installation, but contains no files and will not write anything to the filesystem. As such, it does not require a dist or source key to be installable.

Magento Marketplace requires more than one component to be packaged as a metapackage, which consists of only a composer.json that specifies individual components and their dependencies. (Magento Marketplace also refers to a metapackage as an extension.)
