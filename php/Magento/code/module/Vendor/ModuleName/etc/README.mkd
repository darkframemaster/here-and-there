## Before start
* This file is something about configuration of Magento2.
* The file with `root_` as a prefix is the file will be located in `<MagentoPath>/app/etc` directory.
* The main responsibility of the object manager is object creation and wiring.


## Dependecy injection
**Dependency injection** is when an object’s dependencies are provided to it by its external(外部的) environment instead of manually creating them internally.

In simple terms, when object A requires object or value B to fulfill(执行) a function, then B is a dependency of A.

A dependency creates a degree of coupling between objects in your code. A large amount of coupling limits code reuse and makes moving components to new projects difficult. Using dependency injection allows for a loose coupling in your code.
### Dependency inversion principle
[dependency inversion principle](http://www.oodesign.com/dependency-inversion-principle.html) —— A coding principle that stipulates you use abstractions to reduce code dependencies. This means that high level classes should use the interface of a low level class instead of working with it directly.

## Object manager overview
Since dependency management is the responsibility of the environment, some kind of object manager must be present in complex systems to avoid boilerplate code.
### Object Manager configuration
Magento’s object manager requires three types of configurations:

* Class metadata (definitions) - These configurations describe the class dependencies for an object.
* Type configuration - These	 configurations describe how objects are instantiated and their lifestyle.
* Abstraction-Implementation mappings - These configurations map which concrete(具体的) implementations(成就; 贯彻; 安装启用) to use when interfaces are requested.

### Class metadata
Magento uses class constructor signatures, not doc-block annotations, to retrieve information about class dependencies; that is, to define what dependencies are to be passed to an object. If you write your code in a regular way using the dependency inversion principle, you do not have to worry about class definitions.

### Compiling dependencies
By default, class definitions are read using reflection, but reflection is slow in PHP. To make Magento’s ObjectManager as fast as possible, a definition compiler was introduced. One of the things the compiler does is generate all non-existing dependency injection service classes (proxies, factories and interceptors) declared in code or configuration.

### Type configurations
Type configurations describe the parameters used to instantiate a class and lifestyle of class instances. Depending on it’s scope, the configuration for Magento’s object manager is stored in the following XML files:

* `app/etc/di.xml` : This is the global area application configuration.
* `<moduleDir>/etc/di.xml` : This is the module global area configuration.
* `<moduleDir>/etc/<area>/di.xml` : This is the module area-specific configuration.

Configurations for each scope are merged across modules, so there is no way to create a configuration that is only seen by a single module.

All object manager configuration is located under the config node in the xml files,These configurations are validated by the XML Schema file called `config.xsd`:

```
<config>
	<!-- Object Manager configuration  -->
</config>
```

### Area and application entry points
Magento reads all the `di.xml` configuration files declared in the system and merges them all together by appending all nodes.

The overall configuration is loaded in the following stages:

1. Initial : `app/etc/di.xml`
2. Global : `<moduleDir/etc/di.xml>`
3. Area-specific : `<moduleDir>/etc/<area>/di.xml`

During bootstrapping, each application entry point loads the appropriate `di.xml` files for the area being requested.

### Configuring a type
Type can be configured in your `di.xml` configuration node in the following ways: see `./di.xml`.

### Arguments
Class constructor arguments are configured in your `di.xml` in the argument node.All these arguments will be injected into the class during creation.The name of the argument configured in the XML file must correspond to the name of the parameter in the constructor in the configured class.

see `./Argument.xml`.

### Argument Types:
#### object
Node Formats:
```
<arguments>
	<argument xsi:type="object">{typeName}</argument>
	<argument xsi:type="object" shared="{shared}">{typeName}</argument>
</arguments>
```
Creates an instance of `typeName` type and passes it in as an argument.Any class name, interface name, or virtual type name can be passed as `typeName`.

Setting the `shared` property defines the lifestyle of a created instance.See [Object Lifestyle Management](http://devdocs.magento.com/guides/v2.1/extension-dev-guide/depend-inj.html#object-lifestyle-management)
#### string
Node Formats:
```
<argument xsi:type="string">{strValue}</argument>
<argument xsi:type="string" translate="true">{strValue}</argument>
```
Any value for this argument node will be interpreted(理解，解释) as a string.
#### boolean
Node Format:
```
<argument xsi:type="boolean"><boolValue></argument>
```
Any value for this argument node will be converted into a boolean value.
#### number
Node Format:
```
<argument xsi:type="init_parameter">{Constant::NAME}</argument>
```
The global application initialization argument represented by `Constant::NAME` is looked up and passed as argument.
#### const
Node Format:
```
<argument xsi:type="const">{Constant::NAME}</argument>
```
The `Constant::NAME` constant value will be looked up and passed as the argument.
#### null
Node Format:
```
<argument xsi:type="null" />
```
A null value will be passed in as an argument.
### array
Node Format:
```
<argument xsi:type="array">
	<item name="someKey" xsi:type="<type>">someVal</item>
</argument>
```
An array with elements corresponding to the items will be passed as the argument. The array can contain an infinite number of items. Each array item can be of any object type including an array itself.

When the configuration files for a given scope are merged, array arguments with the same name are merged into a new array. If a new configuration is loaded at a later time, either by a more specific scope or through code, then any array definitions in the new configuration will completely replace the previously loaded config instead of being merged.

### Parameter configuration inheritance
Parameters configured for a class type are automatically configured for all of its descendant(后代; 后裔) classes. Any descendant can override the parameters configured for its supertype(父型); that is, the parent class or interface:

```
<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
    <type name="Magento\Framework\View\Element\Context">
        <arguments>
            <argument name="urlBuilder" xsi:type="object">Magento\Core\Model\Url</argument>
        </arguments>
    </type>
    <type name="Magento\Backend\Block\Context">
        <arguments>
            <argument name="urlBuilder" xsi:type="object">Magento\Backend\Model\Url</argument>
        </arguments>
    </type>
</config>
```
In the preceding example, `Magento\Backend\Block\Context` is a descendant of `Magento\Framework\View\Element\Context`.

The first entry configures all instances of `Magento\Framework\View\Element\Context` as well as its children to pass in `Magento\Core\Model\Url` as `$urlBuilder` in their constructors.

The second entry overrides this and configures all instances of `Magento\Backend\Block\Context` to use `Magento\Backend\Model\Url` as the `$urlBuilder` instead.

### Object Lifestyle management
The main responsibility of the object manager is object creation and wiring, but it can also determine how many instances of that object can exist; e.g. its **lifestyle**.

Magento’s object manager supports the following lifestyles:

* **singleton**(单独的)(default) - Only one instance of this class exists and it is created at the first request. Subsequent use of the class will use that one instance. The instance is released when the container with which it is registered is disposed(意愿的).
* **transient**(短暂的)- A new instance of the class is created every time the class is requested.

The `shared` property determines the lifestyle of both `argument` and `type` configurations.

```
<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
    <type name="Magento\Filesystem" shared="false">
        <arguments>
            <argument name="adapter" xsi:type="object" shared="false">Magento\Filesystem\Adapter\Local</argument>
        </arguments>
    </type>
</config>
```
In this example `Magento\Filesystem` is configured as non-shared, so all clients will retrieve separate instances of `Magento\Filesystem`. Also, every instance of `Magento\Filesystem` will get separate instance of `$adapter`, because it too is non-shared.

## Abstraction-Implementation mappings
The abstraction-implementation mappings are used by Magento’s object manager when the constructor signature of a class requests an object by its interface. The object manager uses these mappings to determine what the default implementation is for that class for a particular scope.

The default implementation is secified using the `preference` node: see `./root_di.xml`.

see `./adminhtml/di.xml` for another example.

## Injection types used in Magento
* Construction Injection
	* Injection as a parameter of constructor method.
	* Magento uses constructor injection to provide dependencies through an object’s class **constructor**. 
* Method Injection
	* Injection as a parameter of other methods.
	* When an object specifies a dependency in one of its **methods** instead of its constructors, it is called method injection.
### Injectable and Newable Objects
* Injectable:
	* Objects that can be obtained through dependency injection. Any object that can be instantiated by the object manager, such as **singletons and factories**, fall into this category.
* Newable:
	* Objects that can only be obtained by creating a new class instance every time. **Transient objects**, such as those that require external input from the user or database, fall into this category.**Attempts to obtain these objects using dependency injections will return an undefined object.**


